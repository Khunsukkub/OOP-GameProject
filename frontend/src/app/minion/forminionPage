File: pages/MinionPage.tsx
‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ô‡πÄ‡∏ô‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
"use client";

import React, { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { submitMinions } from "@/services/gameService";
import "./minion.css";

const MinionPage: React.FC = () => {
  const router = useRouter();
  const searchParams = useSearchParams();

  const player = searchParams.get("player") || "1";
  const player1Name = searchParams.get("player1") || "Player 1";
  const player2Name = searchParams.get("player2") || "Player 2";

  const [selectedMinions, setSelectedMinions] = useState<number>(1);
  const [minionNames, setMinionNames] = useState<Record<number, string>>({});
  const [minionDefense, setMinionDefense] = useState<Record<number, number>>({});
  const [minionCodes, setMinionCodes] = useState<Record<number, string>>({});
  const [selectedMinion, setSelectedMinion] = useState<number | null>(null);

  const minionColors = ["#FF5733", "#33FF57", "#3357FF", "#F4D03F", "#9B59B6"];

  useEffect(() => {
    setMinionNames({});
    setMinionDefense({});
    setMinionCodes({});
    setSelectedMinions(1);
  }, [player]);

  const handleMinionSelection = (num: number) => {
    setSelectedMinions(num);
  };

  const handleNameChange = (minionNumber: number, value: string) => {
    setMinionNames({ ...minionNames, [minionNumber]: value });
  };

  const handleDefenseChange = (minionNumber: number, value: string) => {
    const defValue = parseInt(value);
    if (defValue >= 1 && defValue <= 20) {
      setMinionDefense({ ...minionDefense, [minionNumber]: defValue });
    } else {
      alert("Defense value must be between 1-20");
    }
  };

  const handleMinionClick = (minionNumber: number) => {
    setSelectedMinion(minionNumber);
  };

  const handleCodeChange = (value: string) => {
    if (selectedMinion !== null) {
      setMinionCodes({ ...minionCodes, [selectedMinion]: value });
    }
  };

  const submitAll = async () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for (let i = 1; i <= selectedMinions; i++) {
      if (!minionNames[i] || !minionDefense[i]) {
        alert(`Minion ${i} needs a name and defense value.`);
        return;
      }
    }
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á
    const minions = [...Array(selectedMinions)].map((_, index) => ({
      name: minionNames[index + 1],
      defense: minionDefense[index + 1],
      code: minionCodes[index + 1] || "",
      color: minionColors[index % minionColors.length],
      cost: 10 + index * 5,
    }));

    try {
      await submitMinions(player, minions);
      if (player === "1") {
        router.push(
          `/minion?player=2&player1=${player1Name}&player2=${player2Name}&mode=${searchParams.get("mode")}`
        );
      } else {
        router.push(
          `/game?player1=${player1Name}&player2=${player2Name}&mode=${searchParams.get("mode")}`
        );
      }
    } catch (error) {
      alert("Error submitting minions. Please try again.");
    }
  };

  return (
    <div className="container">
      <h1>Select Your Minions</h1>
      <h2>{player === "1" ? player1Name : player2Name}</h2>
      <div id="minionSelection">
        <label>Choose number of Minions (1-5):</label>
        <input
          type="number"
          min="1"
          max="5"
          value={selectedMinions}
          onChange={(e) => handleMinionSelection(parseInt(e.target.value))}
        />
      </div>
      <div className="minion-list">
        {[...Array(selectedMinions)].map((_, i) => {
          const minionNumber = i + 1;
          return (
            <div key={minionNumber} className="minion-row">
              <div
                className="minion-icon"
                style={{ backgroundColor: minionColors[(minionNumber - 1) % minionColors.length] }}
              />
              <button onClick={() => handleMinionClick(minionNumber)}>
                Minion {minionNumber}
              </button>
              <input
                type="text"
                className="minion-name-input"
                placeholder={`Enter name for Minion ${minionNumber}`}
                value={minionNames[minionNumber] || ""}
                onChange={(e) => handleNameChange(minionNumber, e.target.value)}
              />
              <input
                type="number"
                className="minion-defense-input"
                placeholder="Def: 1-20"
                min="1"
                max="20"
                value={minionDefense[minionNumber] || ""}
                onChange={(e) => handleDefenseChange(minionNumber, e.target.value)}
              />
            </div>
          );
        })}
      </div>
      {selectedMinion !== null && (
        <div id="minionDetails">
          <h2>{minionNames[selectedMinion] || `Minion ${selectedMinion}`} Code</h2>
          <textarea
            placeholder="Write your minion's code here..."
            value={minionCodes[selectedMinion] || ""}
            onChange={(e) => handleCodeChange(e.target.value)}
          />
        </div>
      )}
      <button onClick={() => router.back()}>Back ‚¨ÖÔ∏è</button>
      <button onClick={submitAll}>Submit All Minions üöÄ</button>
    </div>
  );
};

export default MinionPage;
