การเชื่อมต่อพื้นฐาน

Frontend เรียกใช้ REST API ที่ backend ผ่าน endpoint ใน GameController (เช่น /api/game-state, /api/buy-tile, /api/buy-minion, /api/end-turn, /api/bot-move)
ข้อมูลสถานะเกม (turn, ผู้เล่น, งบประมาณ, รายการมินเนี่ยน ฯลฯ) ถูกส่งกลับเป็น JSON ซึ่ง frontend นำไป render ในหน้า GamePage, PlayerInfo, GameBoard เป็นต้น
ส่วนนี้ถือว่ามีการเชื่อมโยงกันแล้วในระดับพื้นฐาน
แต่ยังมีส่วนที่ต้องปรับปรุงเพิ่มเติมเพื่อให้ตรงกับเงื่อนไขของเกมที่กำหนดไว้:

Minion Strategy และความตกลงกันของผู้เล่น

เงื่อนไขที่ 1, 7, 8, 24 (minion strategy ที่ผู้เล่นสคริปต์และต้องตกลงกันไว้) ยังไม่มีการ implement ใน backend
จำเป็นต้องสร้างโมดูลสำหรับรับและ parse strategy script ที่ผู้เล่นส่งเข้ามา รวมถึงตรวจสอบความถูกต้องตาม grammar และป้องกันการแก้ไขในระหว่างเกม
Game End Conditions

เงื่อนไขที่ 2, 39 (เกมจบเมื่อครบเทิร์นที่กำหนด หรือเมื่อมินเนี่ยนของผู้เล่นหมด)
ต้องมี logic ใน backend เพื่อตรวจสอบเงื่อนไขการจบเกมอย่างละเอียด (รวมถึงเปรียบเทียบจำนวนมินเนี่ยน, รวม HP, งบประมาณ) แล้วส่งสถานะ “จบเกม” กลับไปยัง frontend
Configuration File

เงื่อนไขที่ 3 ระบุให้ใช้ไฟล์ config สำหรับพารามิเตอร์ที่จำเป็น
ปัจจุบันค่าอย่าง initial budget, max_turns, ฯลฯ ถูกเขียนเป็นค่าคงที่ (hard-coded) จำเป็นต้องปรับให้อ่านค่าจากไฟล์ configuration (เช่น application.properties, YAML หรือไฟล์ config อื่น ๆ)
รองรับโหมดการเล่นที่หลากหลาย

เงื่อนไขที่ 4, 9, 40: player vs player / player vs bot / bot vs bot
Logic ในการจัดการ bot มีเบื้องต้นใน BotUtil แต่ควรปรับปรุงเพิ่มเติมให้ครอบคลุมทั้งการตั้งค่า (setup) และการคำนวณ action ของ bot ให้ละเอียดตามเงื่อนไขที่กำหนด
จำนวนและลักษณะของมินเนี่ยน

เงื่อนไขที่ 5, 6, 7, 8, 21: เกมต้องรองรับมินเนี่ยน 1-5 แบบ โดยแต่ละแบบมี defense factor และ strategy ที่จะถูก execute ตามลำดับ (โดย minion เก่า execute ก่อน)
ต้องมีการ implement logic สำหรับการ deploy, การสั่งงาน strategy (move, shoot, done, ฯลฯ) และตรวจสอบเงื่อนไขต่าง ๆ (หนึ่งมินเนี่ยนต่อ hex, การซื้อ hex ที่อยู่ติดกัน, ค่าใช้จ่ายในการ spawn ฯลฯ)
การจัดการงบประมาณและดอกเบี้ย

เงื่อนไขที่ 11, 12, 13, 23: ผู้เล่นเริ่มต้นด้วยงบเท่ากัน, ได้รับงบเพิ่มเติมในแต่ละเทิร์น, มีงบสูงสุด (cap) และการคำนวณ interest ตามสูตรที่ระบุ
ควรตรวจสอบว่า Interest.pct และ logic ใน MainGame มีการ rounding ลง (rounded down) ตามที่กำหนดและสอดคล้องกับการคำนวณแบบ integer (แม้ใน implement อาจใช้ double)
เงื่อนไขอื่น ๆ ที่เกี่ยวกับการ spawn และการซื้อ hex

เงื่อนไขที่ 14–20, 29, 35, 36: เกมควรมี logic ในการ spawn มินเนี่ยน (1 ต่อเทิร์น, first minion free) การซื้อ hex (ต้องติดกับ hex ที่มีอยู่แล้ว) รวมถึงการหักค่าใช้จ่ายในแต่ละ action
Logic สำหรับข้อเหล่านี้ใน MainGame และ MapUtil ต้องมีการเพิ่มเติมให้ครอบคลุมทุกเงื่อนไขที่ระบุ
เงื่อนไขสำหรับการคำนวณและการดำเนินการของ minion strategy

เงื่อนไขที่ 24–28, 30–38, 31–33: เกี่ยวกับ grammar ของ minion strategy, การประเมินค่าทางคณิตศาสตร์, การใช้ตัวแปร และคำสั่งต่าง ๆ (เช่น if/while, move, shoot)
ปัจจุบันไม่มี module ที่ parse หรือ execute strategy scripts ตามที่กำหนด จำเป็นต้องพัฒนา parser/engine เพื่อรองรับคำสั่งเหล่านี้
แสดงข้อมูลและ Interface

เงื่อนไขที่ 41: UI ควรแสดงข้อมูลเพียงพอให้ผู้เล่นตัดสินใจได้
Frontend ปัจจุบันมีพื้นฐานแสดงสถานะเกม (turn, งบ, รายการมินเนี่ยน, board) แต่ควรปรับปรุงให้แสดงข้อมูลที่ละเอียดขึ้น เช่น รายละเอียด action log, ข้อมูลของ minion ที่ deploy, สถานะการดำเนิน strategy เป็นต้น
