package model;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class MainGame {
    private static MainGame instance;
    public static int current_turn = 1;
    public static int max_turns = 69; // ค่านี้จะถูก override จาก GameConfig
    public static int spawnRemaining = 47; // เปลี่ยนชื่อจาก spawn_lefts
    public static Minion[] minionList;
    public static Player current_player;
    public static Player opponent_player;
    static Random rand = new Random();

    // สมมติว่า GameConfig ถูก inject ผ่าน Spring (หรือสามารถ set ผ่าน static method)
    private static GameConfig config;

    public static void setConfig(GameConfig cfg) {
        config = cfg;
        max_turns = cfg.getMaxTurn();
        spawnRemaining = cfg.getMaxSpawns();
    }

    public static MainGame getInstance() {
        if (instance == null) {
            instance = new MainGame();
        }
        return instance;
    }

    // ตัวอย่าง method เริ่มเกม
    public static void GameSetting(Player player1, Player player2) {
        minionList = new Minion[0]; // ในอนาคตใช้ MinionSetting เพื่อสร้าง minionList
        getFirstPlayer(player1, player2);
        MapUtil.setDefaultMap();
    }

    public static void getFirstPlayer(Player player1, Player player2) {
        int number = rand.nextInt(2) + 1;
        current_player = (number == 1) ? player1 : player2;
        opponent_player = (current_player == player1) ? player2 : player1;
    }

    // Method ซื้อ tile ที่ลดงบประมาณ
    public static boolean buyTile(String playerName) {
        Player player = MapUtil.getPlayerByName(playerName);
        if (player != null && player.getBudget() >= 20) {
            player.setBudget(Math.floor(player.getBudget() - 20));
            return true;
        }
        return false;
    }

    // Method ซื้อ minion
    public static boolean buyMinion(String playerName, String name, String color, int cost) {
        Player player = MapUtil.getPlayerByName(playerName);
        if (player != null && player.getBudget() >= cost) {
            player.setBudget(Math.floor(player.getBudget() - cost));
            Minion minion = new Minion(name, 100, 1.0, cost, "default"); // ค่า default สามารถแก้ไขได้
            player.addMinion(minion);
            return true;
        }
        return false;
    }

    // Method จบเทิร์น: เพิ่มงบตาม interest แล้วสลับผู้เล่น
    public void endTurn() {
        double income = Interest.pct(current_player.getBudget(), current_turn);
        current_player.setBudget(Math.floor(current_player.getBudget() + income));
        current_turn++;
        // ตรวจสอบเงื่อนไขจบเกมก่อนสลับผู้เล่น
        String winner = checkGameEnd();
        if (winner != null) {
            System.out.println("Game Over! Winner: " + winner);
            // ทำการ terminate game หรือส่งสถานะจบเกมให้ frontend
        } else {
            // สลับผู้เล่น
            Player temp = current_player;
            current_player = opponent_player;
            opponent_player = temp;
        }
    }

    /**
     * ตรวจสอบเงื่อนไขจบเกม:
     * 1) ถ้าผู้เล่นใดหมด minion
     * 2) ถ้าเทิร์นครบ max_turns, เปรียบเทียบจำนวน minion, HP รวม, งบประมาณ
     * คืนค่า winner เป็นชื่อผู้ชนะหรือ "Draw" ถ้าเสมอ หรือ null ถ้ายังไม่จบเกม
     */
    public static String checkGameEnd() {
        Player[] players = MapUtil.getPlayers();
        if (players[0].getMinionCount() == 0 || players[1].getMinionCount() == 0) {
            if (players[0].getMinionCount() == 0 && players[1].getMinionCount() == 0) {
                return "Draw";
            } else if (players[0].getMinionCount() == 0) {
                return players[1].getName();
            } else {
                return players[0].getName();
            }
        }
        if (current_turn >= max_turns) {
            int winner = evaluateWinner(players[0], players[1]);
            if (winner == 0) return "Draw";
            return players[winner - 1].getName();
        }
        return null;
    }

    private static int evaluateWinner(Player p1, Player p2) {
        if (p1.getMinionCount() > p2.getMinionCount()) return 1;
        if (p2.getMinionCount() > p1.getMinionCount()) return 2;
        double hp1 = p1.getTotalMinionHP();
        double hp2 = p2.getTotalMinionHP();
        if (hp1 > hp2) return 1;
        if (hp2 > hp1) return 2;
        if (p1.getBudget() > p2.getBudget()) return 1;
        if (p2.getBudget() > p1.getBudget()) return 2;
        return 0; // เสมอ
    }

    // เพิ่ม method สำหรับส่ง log ของ minion strategy (ตัวอย่าง)
    public static List<String> getActionLog() {
        // สมมติว่าเราเก็บ log ของทุก minion strategy ในที่เดียว
        // ในที่นี้ส่งกลับเป็น list ว่าง ๆ สำหรับตัวอย่าง
        return new ArrayList<>();
    }
}
